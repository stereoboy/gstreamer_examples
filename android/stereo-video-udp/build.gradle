apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "org.freedesktop.gstreamer.examples.stereo_video_viewer_udp"
        minSdkVersion 15
        targetSdkVersion 15
        versionCode 1
        versionName "1.0"


        externalNativeBuild {
            ndkBuild {
                def gstRoot

                if (project.hasProperty('gstAndroidRoot'))
                    gstRoot = project.gstAndroidRoot
                else
                    gstRoot = System.env.GSTREAMER_ROOT_ANDROID

                if (gstRoot == null)
                    throw new GradleException('GSTREAMER_ROOT_ANDROID must be set, or "gstAndroidRoot" must be defined in your gradle.properties in the top level directory of the unpacked universal GStreamer Android binaries')

                arguments "NDK_APPLICATION_MK=jni/Application.mk", "GSTREAMER_JAVA_SRC_DIR=src", "GSTREAMER_ROOT_ANDROID=$gstRoot", "GSTREAMER_ASSETS_DIR=src/assets"

                targets "stereo-video-viewer-udp"

                // All archs except MIPS and MIPS64 are supported
                abiFilters  'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            sourceSets {
                main {
                    manifest.srcFile 'AndroidManifest.xml'
                    java.srcDirs = ['src']
                    resources.srcDirs = ['src']
                    aidl.srcDirs = ['src']
                    renderscript.srcDirs = ['src']
                    res.srcDirs = ['res']
                    assets.srcDirs = ['assets']
                }
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }
}

afterEvaluate {
    if (project.hasProperty('compileDebugJavaWithJavac'))
        project.compileDebugJavaWithJavac.dependsOn 'externalNativeBuildDebug'
    if (project.hasProperty('compileReleaseJavaWithJavac'))
        project.compileReleaseJavaWithJavac.dependsOn 'externalNativeBuildRelease'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:appcompat-v7:23.1.1'
}

//
// reference: Oculus VR Sample App
//
task( "cleanWorkAround" ) {
    project.logger.lifecycle('{}:cleanWorkAround() defined', project.name)
    description "Workaround for '.externalNativeBuild', 'gst-android-build' not being deleted on clean"

    doFirst {
        project.logger.lifecycle('{}:cleanWorkAround doFirst', project.name)
    }

    doLast {
        project.delete project.file( ".externalNativeBuild" )
        project.delete project.file( "gst-android-build" )
        project.logger.lifecycle('{}:cleanWorkAround doLast completed', project.name)
    }
}
// WORKAROUND: On Mac OS X, running ndk-build clean with a high num of parallel executions
// set may result in the following build error:  rm: fts_read: No such file or directory.
// Currently, there isn't a good way to specify numProcs=1 only on clean. So, in order
// to work around the issue, delete the auto-generated .externalNativeBuild artifacts
// (where $numProcs specified) before executing the clean task.
//project.clean.dependsOn cleanWorkAround
//project.cleanall.dependsOn cleanWorkAround
//cleanWorkAround.dependsOn project.clean

task cleanAll {
    description "customized clean task including original clean task"

    doLast {
        project.delete project.file( ".externalNativeBuild" )
        project.delete project.file( "gst-android-build" )
        it.logger.lifecycle('{}:{} doLast() completed', project.name, it.name)
    }
}
project.cleanAll.dependsOn project.clean